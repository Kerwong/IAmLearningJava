package com.chapter12localdate;import java.time.DayOfWeek;import java.time.LocalDate;import java.time.temporal.ChronoUnit;import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;import java.util.stream.Stream;/** * Created by wangwenchao02 on 2017/8/28. */public class WorkingDayUtil {    private static List<LocalDate> NONE_WORKING_DAY = Arrays.asList(            LocalDate.of(2017, 1, 20),            LocalDate.of(2017, 2, 20),            LocalDate.of(2017, 3, 20),            LocalDate.of(2017, 4, 20),            LocalDate.of(2017, 5, 20),            LocalDate.of(2017, 6, 20),            LocalDate.of(2017, 7, 20),            LocalDate.of(2017, 8, 20),            LocalDate.of(2017, 9, 20),            LocalDate.of(2017, 10, 20)    );    public static LocalDate nextWorkingDay(LocalDate date) {        return nextNWorkingDay(date, 1).get(0);    }    public static List<LocalDate> nextNWorkingDay(LocalDate date, int n) {        return Stream.iterate(date.plus(1, ChronoUnit.DAYS), d -> d.plus(1, ChronoUnit.DAYS))                .parallel()                .filter(WorkingDayUtil::isWorkingDay)                .limit(n)                .collect(Collectors.toList());    }    public static List<LocalDate> nextNHoliday(LocalDate date, int n) {        return Stream.iterate(date.plus(1, ChronoUnit.DAYS), d -> d.plus(1, ChronoUnit.DAYS))                .parallel()                .filter(WorkingDayUtil::isHoliday)                .limit(n)                .collect(Collectors.toList());    }    public static boolean isWorkingDay(LocalDate date) {        DayOfWeek dayOfWeek = date.getDayOfWeek();        if (dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY) {            return false;        } else if (NONE_WORKING_DAY.contains(date)) {            return false;        } else {            return true;        }    }    public static boolean isHoliday(LocalDate date) {        return !isWorkingDay(date);    }    public static void main(String[] args) {        System.out.println(nextNWorkingDay(LocalDate.now(), 10));        System.out.println(nextNHoliday(LocalDate.now(), 10));    }}