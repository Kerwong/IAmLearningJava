package com.chapter6collect;import java.util.List;import java.util.Map;import java.util.stream.Collectors;import java.util.stream.IntStream;/** * Created by wangwenchao02 on 2017/8/21. */public class PrimeMain {    private static boolean isPrime(int n) {        int mid = (int) Math.sqrt(n);        return IntStream.rangeClosed(2, mid).noneMatch(t -> n % t == 0);    }    private static Map<Boolean, List<Integer>> partitionPrimes(int n) {        return IntStream.rangeClosed(2, n)                .parallel()                .boxed()                .collect(Collectors.partitioningBy(c -> isPrime(c)));    }    private static Map<Boolean, List<Integer>> partitionPrimesWithCustomCollector(int n) {        return IntStream.rangeClosed(2, n).parallel().boxed().collect(new PrimeCollector());    // 此处 parallel 效果拔群    }    public static void main(String[] args) {        long fastest = Long.MAX_VALUE;        for (int i = 0; i < 10; i++) {            long start = System.nanoTime();            partitionPrimesWithCustomCollector(1_000_000);  // 100ms, 1250ms//            partitionPrimes(1_000_0000);                       // 240ms, 6100ms            long duration = (System.nanoTime() - start) / 1_000_000;            System.out.println("execution done in " + duration + " ms");            if (duration < fastest) fastest = duration;        }        System.out.println("Fastest execution done in " + fastest + " ms");    }}