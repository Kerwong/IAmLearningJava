package com.chapter6collect;import java.util.List;import java.util.Map;import java.util.stream.IntStream;/** * Created by wangwenchao02 on 2017/8/21. */public class PrimeMain {//    public static void main(String[] args) {//        Map<Boolean, List<Integer>> map = IntStream.rangeClosed(2, 100)//                .parallel()//                .boxed()//                .collect(Collectors.partitioningBy(PrimeMain::isPrime));//        System.out.println(map);//    }    private static Map<Boolean, List<Integer>> partitionPrimesWithCustomCollector(int n) {        return IntStream.rangeClosed(2, n).parallel().boxed().collect(new PrimeCollector());    // 此处 parallel 效果拔群    }    public static void main(String[] args) {        long fastest = Long.MAX_VALUE;        for (int i = 0; i < 10; i++) {            long start = System.nanoTime();            partitionPrimesWithCustomCollector(1_000_000);            long duration = (System.nanoTime() - start) / 1_000_000;            System.out.println("execution done in " + duration + " ms");            if (duration < fastest) fastest = duration;        }        System.out.println("Fastest execution done in " + fastest + " ms");    }}