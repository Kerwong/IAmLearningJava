package com.chapter6collect;import java.util.ArrayList;import java.util.Collections;import java.util.EnumSet;import java.util.List;import java.util.Set;import java.util.function.BiConsumer;import java.util.function.BinaryOperator;import java.util.function.Function;import java.util.function.Supplier;import java.util.stream.Collector;/** * Created by wangwenchao02 on 2017/8/21. */public class MyCollector<T> implements Collector<T, List<T>, List<T>>{    /**     * 创建一个空的累加器实例     * */    @Override    public Supplier<List<T>> supplier() {        return ArrayList::new;    }    /**     * 返回执行归约操作的函数     * */    @Override    public BiConsumer<List<T>, T> accumulator() {        return List::add;    }    /**     * 合并两个结果容器     *     * 以支持并行归约     * */    @Override    public BinaryOperator<List<T>> combiner() {        return (l1, l2) -> { l1.addAll(l2); return l1; };    }    /**     * 返回在累积过程的最后要调用的函数, 以便将累加器对象转换为整个集合操作的最终结果     * */    @Override    public Function<List<T>, List<T>> finisher() {        return Function.identity();    }    @Override    public Set<Characteristics> characteristics() {        return Collections.unmodifiableSet(EnumSet.of(Characteristics.IDENTITY_FINISH, Characteristics.CONCURRENT));    }}