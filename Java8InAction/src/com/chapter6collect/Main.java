package com.chapter6collect;import java.util.Arrays;import java.util.List;import java.util.Map;import java.util.stream.Collectors;/** * Created by wangwenchao02 on 2017/8/21. */public class Main {    private Trader t1 = new Trader("Raoul", "Cambridge");    private Trader t2 = new Trader("Mario", "Milan");    private Trader t3 = new Trader("Alan", "Cambridge");    private Trader t4 = new Trader("Brain", "Cambridge");    private List<Transaction> transactions = Arrays.asList(            new Transaction(t1, 2012, 1000),            new Transaction(t1, 2011, 400),            new Transaction(t2, 2012, 710),            new Transaction(t2, 2012, 700),            new Transaction(t3, 2012, 950),            new Transaction(t4, 2011, 300)    );    public static void main(String[] args) {        Main main = new Main();        int valSum = main.transactions.stream().collect(Collectors.summingInt(Transaction::getValue));        Map<ValueLevel, List<Transaction>> map = main.groupTransaction(main.transactions);        System.out.println(map);        Map<Integer, Map<ValueLevel, List<Transaction>>> map2 = main.groupMultiTransaction(main.transactions);        System.out.println(map2);        Map<Boolean, Map<ValueLevel, List<Transaction>>> map3 = main.partitionTransaction(main.transactions);        System.out.println(map3);    }    Map<ValueLevel, List<Transaction>> groupTransaction(List<Transaction> transactions) {        return transactions.stream()                .collect(Collectors.groupingBy(t -> {                    if (t.getValue() < 333) return ValueLevel.LOW;                    else if (t.getValue() < 666) return ValueLevel.MEDIUM;                    else return ValueLevel.HIGH;                }));    }    Map<Integer, Map<ValueLevel, List<Transaction>>> groupMultiTransaction(List<Transaction> transactions) {        return transactions.stream()                .collect(Collectors.groupingBy(Transaction::getYear, Collectors.groupingBy(                        t -> {                            if (t.getValue() < 333) return ValueLevel.LOW;                            else if (t.getValue() < 666) return ValueLevel.MEDIUM;                            else return ValueLevel.HIGH;                        }                )));    }    Map<Boolean, Map<ValueLevel, List<Transaction>>> partitionTransaction(List<Transaction> transactions) {        return transactions.stream().collect(                Collectors.partitioningBy(t -> t.getYear() == 2012, Collectors.groupingBy(                        t1 -> {                            if (t1.getValue() < 333) return ValueLevel.LOW;                            else if (t1.getValue() < 666) return ValueLevel.MEDIUM;                            else return ValueLevel.HIGH;                        }                ))        );    }}