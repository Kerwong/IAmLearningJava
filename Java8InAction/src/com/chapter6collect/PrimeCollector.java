package com.chapter6collect;import java.util.ArrayList;import java.util.Collections;import java.util.EnumSet;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import java.util.function.BiConsumer;import java.util.function.BinaryOperator;import java.util.function.Function;import java.util.function.Predicate;import java.util.function.Supplier;import java.util.stream.Collector;/** * Created by wangwenchao02 on 2017/8/22. */// Integer 是流中要收集的元素泛型// Map<Boolean, List<Integer>> 是累加器类型，用于收集过程中累积部分结果的// Map<Boolean, List<Integer>> 返回的对象类型public class PrimeCollector implements Collector<Integer,                                                 Map<Boolean, List<Integer>>,                                                 Map<Boolean, List<Integer>>> {    @Override    public Supplier<Map<Boolean, List<Integer>>> supplier() {        return () -> new HashMap<Boolean, List<Integer>>() {            {                put(true, new ArrayList<>());   // 保存质数                put(false, new ArrayList<>());  // 保存非质数            }        };    }    @Override    public BiConsumer<Map<Boolean, List<Integer>>, Integer> accumulator() {        return (Map<Boolean, List<Integer>> acc, Integer n) -> {            acc.get(isPrime(acc.get(true), n)).add(n);  // 判断 n 是否为质数，并添加至相应 Map        };    }    @Override    public BinaryOperator<Map<Boolean, List<Integer>>> combiner() {        return (Map<Boolean, List<Integer>> m1, Map<Boolean, List<Integer>> m2) -> {            m1.get(true).addAll(m2.get(true));  // 将质数集合合并            m1.get(false).addAll(m2.get(false));    // 将非质数集合合并            return m1;        };        // 该收集器不能并行使用, 以上写法正确, 然而并不会被调用，仅为了保持完整性//        throw new UnsupportedOperationException();    }    @Override    public Function<Map<Boolean, List<Integer>>, Map<Boolean, List<Integer>>> finisher() {        return Function.identity();    }    @Override    public Set<Characteristics> characteristics() {        return Collections.unmodifiableSet(EnumSet.of(Characteristics.IDENTITY_FINISH));    }//    private static boolean isPrime(int n) {//        int mid = (int) Math.sqrt(n);//        return IntStream.rangeClosed(2, mid).noneMatch(t -> n % t == 0);//    }    private static boolean isPrime(List<Integer> primes, int n) {        int mid = (int) Math.sqrt(n);        return takeWhile(primes, i -> i <= mid)                .stream()                .noneMatch(i -> n % i ==0);    }    private static <A> List<A> takeWhile(List<A> list, Predicate<A> p) {        int i = 0;        for (A item : list) {            if (!p.test(item)) {                return list.subList(0, i);            }            i++;        }        return list;    }}