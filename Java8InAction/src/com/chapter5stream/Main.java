package com.chapter5stream;import java.util.Arrays;import java.util.Comparator;import java.util.List;import java.util.Optional;import java.util.OptionalInt;import java.util.stream.Collectors;/** * Created by wangwenchao02 on 2017/8/21. */public class Main {    private Trader t1 = new Trader("Raoul", "Cambridge");    private Trader t2 = new Trader("Mario", "Milan");    private Trader t3 = new Trader("Alan", "Cambridge");    private Trader t4 = new Trader("Brain", "Cambridge");    private List<Transaction> transactions = Arrays.asList(            new Transaction(t1, 2012, 1000),            new Transaction(t1, 2011, 400),            new Transaction(t2, 2012, 710),            new Transaction(t2, 2012, 700),            new Transaction(t3, 2012, 950),            new Transaction(t4, 2011, 300)    );    public static void main(String[] args) {        Main main = new Main();        System.out.println(main.findTransactionAfter2011AndSorted(main.transactions));        System.out.println(main.findAllCity(main.transactions));        System.out.println(main.findTradeFromCambridgeAndSortByName(main.transactions));        System.out.println(main.findTradeNameAndSortByName(main.transactions));        System.out.println(main.findTradeInMilan(main.transactions));        main.printTraderInMilanValue(main.transactions);        System.out.println(main.findMaxTransactionValue(main.transactions));        System.out.println(main.findMinValueTransaction(main.transactions));    }    List<Transaction> findTransactionAfter2011AndSorted(List<Transaction> transactions) {        return transactions.stream()                .filter(t -> t.getYear() == 2011)                .sorted(Comparator.comparing(Transaction::getValue))                .collect(Collectors.toList());    }    List<String> findAllCity(List<Transaction> transactions) {        return transactions.stream()                .map(t -> t.getTrader().getCity())                .distinct()                .collect(Collectors.toList());    }    List<Trader> findTradeFromCambridgeAndSortByName(List<Transaction> transactions) {        return transactions.stream()                .filter(t -> t.getTrader().getCity().equals("Cambridge"))                .map(Transaction::getTrader)                .distinct()                .sorted(Comparator.comparing(Trader::getName))                .collect(Collectors.toList());    }    List<String> findTradeNameAndSortByName(List<Transaction> transactions) {        return transactions.stream()                .map(t -> t.getTrader().getName())                .distinct()                .sorted()                .collect(Collectors.toList());    }    List<Trader> findTradeInMilan(List<Transaction> transactions) {        return transactions.stream()                .filter(t -> t.getTrader().getCity().equals("Milan"))                .map(Transaction::getTrader)                .distinct()                .collect(Collectors.toList());    }    void printTraderInMilanValue(List<Transaction> transactions) {        transactions.stream()                .filter(t -> t.getTrader().getCity().equals("Milan"))                .map(Transaction::getValue)                .forEach(System.out::println);    }    Optional<Integer> findMaxTransactionValue(List<Transaction> transactions) {        return transactions.stream()                .map(Transaction::getValue)                .reduce(Integer::max);    }    OptionalInt findMaxTransactionValueToInt(List<Transaction> transactions) {        return transactions.stream()                .mapToInt(Transaction::getValue)                .max();    }    Optional<Transaction> findMinValueTransaction(List<Transaction> transactions) {        return transactions.stream()                .sorted((o1, o2) -> Integer.compare(o1.getValue(), o2.getValue()))                .findFirst();    }}